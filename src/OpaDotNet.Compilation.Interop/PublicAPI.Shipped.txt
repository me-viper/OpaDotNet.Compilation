#nullable enable
OpaDotNet.Compilation.Interop.RegoInteropCompiler
OpaDotNet.Compilation.Interop.RegoInteropCompiler.CompileBundle(string! bundlePath, System.Collections.Generic.IEnumerable<string!>? entrypoints = null, string? capabilitiesFilePath = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!
OpaDotNet.Compilation.Interop.RegoInteropCompiler.CompileFile(string! sourceFilePath, System.Collections.Generic.IEnumerable<string!>? entrypoints = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!
OpaDotNet.Compilation.Interop.RegoInteropCompiler.CompileStream(System.IO.Stream! bundle, System.Collections.Generic.IEnumerable<string!>? entrypoints = null, System.IO.Stream? capabilitiesJson = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<System.IO.Stream!>!
OpaDotNet.Compilation.Interop.RegoInteropCompiler.RegoInteropCompiler(Microsoft.Extensions.Options.IOptions<OpaDotNet.Compilation.Abstractions.RegoCompilerOptions!>? options = null, Microsoft.Extensions.Logging.ILogger<OpaDotNet.Compilation.Interop.RegoInteropCompiler!>? logger = null) -> void
OpaDotNet.Compilation.Interop.RegoInteropCompiler.Version(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<OpaDotNet.Compilation.Abstractions.RegoCompilerVersion!>!
